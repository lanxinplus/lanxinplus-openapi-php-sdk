<?php
/**
 * V1MessagesCreateRequestBody
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */

/**
 * LanXin+ OpenAPI
 *
 * LanXin+ OpenAPI Platform
 *
 * Generated by: https://openapi.lanxin.cn
 */

/**
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */

namespace LanXinPlusOpenAPI\Model;

use \ArrayAccess;
use \LanXinPlusOpenAPI\ObjectSerializer;

/**
 * V1MessagesCreateRequestBody Class Doc Comment
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin+ team
 * @link     https://openapi.lanxin.cn
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class V1MessagesCreateRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V1MessagesCreateRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountId' => 'string',
        'attach' => 'string',
        'departmentIdList' => 'string[]',
        'entryId' => 'string',
        'msgData' => 'object',
        'msgType' => 'string',
        'userIdList' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accountId' => null,
        'attach' => null,
        'departmentIdList' => null,
        'entryId' => null,
        'msgData' => null,
        'msgType' => null,
        'userIdList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'accountId',
        'attach' => 'attach',
        'departmentIdList' => 'departmentIdList',
        'entryId' => 'entryId',
        'msgData' => 'msgData',
        'msgType' => 'msgType',
        'userIdList' => 'userIdList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'attach' => 'setAttach',
        'departmentIdList' => 'setDepartmentIdList',
        'entryId' => 'setEntryId',
        'msgData' => 'setMsgData',
        'msgType' => 'setMsgType',
        'userIdList' => 'setUserIdList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'attach' => 'getAttach',
        'departmentIdList' => 'getDepartmentIdList',
        'entryId' => 'getEntryId',
        'msgData' => 'getMsgData',
        'msgType' => 'getMsgType',
        'userIdList' => 'getUserIdList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = $data['accountId'] ?? null;
        $this->container['attach'] = $data['attach'] ?? null;
        $this->container['departmentIdList'] = $data['departmentIdList'] ?? null;
        $this->container['entryId'] = $data['entryId'] ?? null;
        $this->container['msgData'] = $data['msgData'] ?? null;
        $this->container['msgType'] = $data['msgType'] ?? null;
        $this->container['userIdList'] = $data['userIdList'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId 普通应用不需要填，仅适用于应用使用多公号消息通道的情况，例如移动会务。accountId为公号ID/entryId为应用入口ID。优先使用accountId做为目标公号。如果accountId为空，则使用entryId指定的的应用入口所关联的公号。如果应用只有一个入口可不填
     *
     * @return self
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets attach
     *
     * @return string|null
     */
    public function getAttach()
    {
        return $this->container['attach'];
    }

    /**
     * Sets attach
     *
     * @param string|null $attach 普通应用不需要填，仅适用于微应用，公号消息附加数据，目前用于传递微应用链接上下文数据，内容需要做UrlEncode。
     *
     * @return self
     */
    public function setAttach($attach)
    {
        $this->container['attach'] = $attach;

        return $this;
    }

    /**
     * Gets departmentIdList
     *
     * @return string[]|null
     */
    public function getDepartmentIdList()
    {
        return $this->container['departmentIdList'];
    }

    /**
     * Sets departmentIdList
     *
     * @param string[]|null $departmentIdList 接收者分支列表（分支下的所有人），可选，与userIdList二者间必选一个，如果需要全组织广播，则填根分支Id：orgId-0，例如：524288-0, 最多支持100个, 全组织广播时，只支持1个组织
     *
     * @return self
     */
    public function setDepartmentIdList($departmentIdList)
    {
        $this->container['departmentIdList'] = $departmentIdList;

        return $this;
    }

    /**
     * Gets entryId
     *
     * @return string|null
     */
    public function getEntryId()
    {
        return $this->container['entryId'];
    }

    /**
     * Sets entryId
     *
     * @param string|null $entryId 普通应用不需要填，仅适用于微应用
     *
     * @return self
     */
    public function setEntryId($entryId)
    {
        $this->container['entryId'] = $entryId;

        return $this;
    }

    /**
     * Gets msgData
     *
     * @return object|null
     */
    public function getMsgData()
    {
        return $this->container['msgData'];
    }

    /**
     * Sets msgData
     *
     * @param object|null $msgData type 类型名对应的同名的格式化数据。每种格式都有对应的数据类型
     *
     * @return self
     */
    public function setMsgData($msgData)
    {
        $this->container['msgData'] = $msgData;

        return $this;
    }

    /**
     * Gets msgType
     *
     * @return string|null
     */
    public function getMsgType()
    {
        return $this->container['msgType'];
    }

    /**
     * Sets msgType
     *
     * @param string|null $msgType 发送的消息格式，支持以下几种：\"text\"，\"oacard\"，\"linkCard\"，\"appCard\"
     *
     * @return self
     */
    public function setMsgType($msgType)
    {
        $this->container['msgType'] = $msgType;

        return $this;
    }

    /**
     * Gets userIdList
     *
     * @return string[]|null
     */
    public function getUserIdList()
    {
        return $this->container['userIdList'];
    }

    /**
     * Sets userIdList
     *
     * @param string[]|null $userIdList 接收者人员列表，指定消息接收者时使用，可选，与departmentIdList二者间必选一个, 最多支持1000个
     *
     * @return self
     */
    public function setUserIdList($userIdList)
    {
        $this->container['userIdList'] = $userIdList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


