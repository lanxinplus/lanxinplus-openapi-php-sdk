<?php
/**
 * V1DeptsFetchData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */

/**
 * LanXin+ OpenAPI
 *
 * LanXin+ OpenAPI Platform
 *
 * Generated by: https://openapi.lanxin.cn
 */

/**
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */

namespace LanXinPlusOpenAPI\Model;

use \ArrayAccess;
use \LanXinPlusOpenAPI\ObjectSerializer;

/**
 * V1DeptsFetchData Class Doc Comment
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin+ team
 * @link     https://openapi.lanxin.cn
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class V1DeptsFetchData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V1DeptsFetchData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ancestorDepartments' => '\LanXinPlusOpenAPI\Model\Department[]',
        'deletedMembers' => 'int',
        'externalId' => 'string',
        'frozenMembers' => 'int',
        'hasChildren' => 'bool',
        'id' => 'string',
        'inactiveMembers' => 'int',
        'name' => 'string',
        'normalMembers' => 'int',
        'order' => 'float',
        'parentId' => 'string',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ancestorDepartments' => null,
        'deletedMembers' => null,
        'externalId' => null,
        'frozenMembers' => null,
        'hasChildren' => null,
        'id' => null,
        'inactiveMembers' => null,
        'name' => null,
        'normalMembers' => null,
        'order' => null,
        'parentId' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ancestorDepartments' => 'ancestorDepartments',
        'deletedMembers' => 'deletedMembers',
        'externalId' => 'externalId',
        'frozenMembers' => 'frozenMembers',
        'hasChildren' => 'hasChildren',
        'id' => 'id',
        'inactiveMembers' => 'inactiveMembers',
        'name' => 'name',
        'normalMembers' => 'normalMembers',
        'order' => 'order',
        'parentId' => 'parentId',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ancestorDepartments' => 'setAncestorDepartments',
        'deletedMembers' => 'setDeletedMembers',
        'externalId' => 'setExternalId',
        'frozenMembers' => 'setFrozenMembers',
        'hasChildren' => 'setHasChildren',
        'id' => 'setId',
        'inactiveMembers' => 'setInactiveMembers',
        'name' => 'setName',
        'normalMembers' => 'setNormalMembers',
        'order' => 'setOrder',
        'parentId' => 'setParentId',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ancestorDepartments' => 'getAncestorDepartments',
        'deletedMembers' => 'getDeletedMembers',
        'externalId' => 'getExternalId',
        'frozenMembers' => 'getFrozenMembers',
        'hasChildren' => 'getHasChildren',
        'id' => 'getId',
        'inactiveMembers' => 'getInactiveMembers',
        'name' => 'getName',
        'normalMembers' => 'getNormalMembers',
        'order' => 'getOrder',
        'parentId' => 'getParentId',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ancestorDepartments'] = $data['ancestorDepartments'] ?? null;
        $this->container['deletedMembers'] = $data['deletedMembers'] ?? null;
        $this->container['externalId'] = $data['externalId'] ?? null;
        $this->container['frozenMembers'] = $data['frozenMembers'] ?? null;
        $this->container['hasChildren'] = $data['hasChildren'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['inactiveMembers'] = $data['inactiveMembers'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['normalMembers'] = $data['normalMembers'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['parentId'] = $data['parentId'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ancestorDepartments
     *
     * @return \LanXinPlusOpenAPI\Model\Department[]|null
     */
    public function getAncestorDepartments()
    {
        return $this->container['ancestorDepartments'];
    }

    /**
     * Sets ancestorDepartments
     *
     * @param \LanXinPlusOpenAPI\Model\Department[]|null $ancestorDepartments 部门祖先列表
     *
     * @return self
     */
    public function setAncestorDepartments($ancestorDepartments)
    {
        $this->container['ancestorDepartments'] = $ancestorDepartments;

        return $this;
    }

    /**
     * Gets deletedMembers
     *
     * @return int|null
     */
    public function getDeletedMembers()
    {
        return $this->container['deletedMembers'];
    }

    /**
     * Sets deletedMembers
     *
     * @param int|null $deletedMembers 已删除
     *
     * @return self
     */
    public function setDeletedMembers($deletedMembers)
    {
        $this->container['deletedMembers'] = $deletedMembers;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string|null $externalId 分支外部ID
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets frozenMembers
     *
     * @return int|null
     */
    public function getFrozenMembers()
    {
        return $this->container['frozenMembers'];
    }

    /**
     * Sets frozenMembers
     *
     * @param int|null $frozenMembers 已冻结
     *
     * @return self
     */
    public function setFrozenMembers($frozenMembers)
    {
        $this->container['frozenMembers'] = $frozenMembers;

        return $this;
    }

    /**
     * Gets hasChildren
     *
     * @return bool|null
     */
    public function getHasChildren()
    {
        return $this->container['hasChildren'];
    }

    /**
     * Sets hasChildren
     *
     * @param bool|null $hasChildren 是否有子分支
     *
     * @return self
     */
    public function setHasChildren($hasChildren)
    {
        $this->container['hasChildren'] = $hasChildren;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 当前Id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inactiveMembers
     *
     * @return int|null
     */
    public function getInactiveMembers()
    {
        return $this->container['inactiveMembers'];
    }

    /**
     * Sets inactiveMembers
     *
     * @param int|null $inactiveMembers 未注册
     *
     * @return self
     */
    public function setInactiveMembers($inactiveMembers)
    {
        $this->container['inactiveMembers'] = $inactiveMembers;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 分支名称
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets normalMembers
     *
     * @return int|null
     */
    public function getNormalMembers()
    {
        return $this->container['normalMembers'];
    }

    /**
     * Sets normalMembers
     *
     * @param int|null $normalMembers 已注册
     *
     * @return self
     */
    public function setNormalMembers($normalMembers)
    {
        $this->container['normalMembers'] = $normalMembers;

        return $this;
    }

    /**
     * Gets order
     *
     * @return float|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param float|null $order 分支顺序，越小排在越前面
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param string|null $parentId 父Id
     *
     * @return self
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags 该分支所持有的全部标签ID列表
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


