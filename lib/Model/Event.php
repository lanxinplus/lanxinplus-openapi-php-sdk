<?php
/**
 * Event
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */

/**
 * LanXin+ OpenAPI
 *
 * LanXin+ OpenAPI Platform
 *
 * Generated by: https://openapi.lanxin.cn
 */

/**
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */

namespace LanXinPlusOpenAPI\Model;

use \ArrayAccess;
use \LanXinPlusOpenAPI\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin+ team
 * @link     https://openapi.lanxin.cn
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Event implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channelType' => 'int',
        'deviceType' => 'int',
        'entryId' => 'string',
        'eventData' => 'string',
        'eventType' => 'string',
        'expires' => 'int',
        'pushData' => '\LanXinPlusOpenAPI\Model\PushData',
        'receiverIds' => 'string[]',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channelType' => null,
        'deviceType' => null,
        'entryId' => null,
        'eventData' => null,
        'eventType' => null,
        'expires' => null,
        'pushData' => null,
        'receiverIds' => null,
        'version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channelType' => 'channelType',
        'deviceType' => 'deviceType',
        'entryId' => 'entryId',
        'eventData' => 'eventData',
        'eventType' => 'eventType',
        'expires' => 'expires',
        'pushData' => 'pushData',
        'receiverIds' => 'receiverIds',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channelType' => 'setChannelType',
        'deviceType' => 'setDeviceType',
        'entryId' => 'setEntryId',
        'eventData' => 'setEventData',
        'eventType' => 'setEventType',
        'expires' => 'setExpires',
        'pushData' => 'setPushData',
        'receiverIds' => 'setReceiverIds',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channelType' => 'getChannelType',
        'deviceType' => 'getDeviceType',
        'entryId' => 'getEntryId',
        'eventData' => 'getEventData',
        'eventType' => 'getEventType',
        'expires' => 'getExpires',
        'pushData' => 'getPushData',
        'receiverIds' => 'getReceiverIds',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channelType'] = $data['channelType'] ?? null;
        $this->container['deviceType'] = $data['deviceType'] ?? null;
        $this->container['entryId'] = $data['entryId'] ?? null;
        $this->container['eventData'] = $data['eventData'] ?? null;
        $this->container['eventType'] = $data['eventType'] ?? null;
        $this->container['expires'] = $data['expires'] ?? null;
        $this->container['pushData'] = $data['pushData'] ?? null;
        $this->container['receiverIds'] = $data['receiverIds'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channelType
     *
     * @return int|null
     */
    public function getChannelType()
    {
        return $this->container['channelType'];
    }

    /**
     * Sets channelType
     *
     * @param int|null $channelType 通道类型
     *
     * @return self
     */
    public function setChannelType($channelType)
    {
        $this->container['channelType'] = $channelType;

        return $this;
    }

    /**
     * Gets deviceType
     *
     * @return int|null
     */
    public function getDeviceType()
    {
        return $this->container['deviceType'];
    }

    /**
     * Sets deviceType
     *
     * @param int|null $deviceType 推送的目标设备类型：1: android, 2: ios, 4: windows, 8: mac, 16: linux 类似于channelType字段，该字段也支持或运算符( | )。如果不填或者将该字段置0， 那么开平会将该事件推送到所有的登录设备。
     *
     * @return self
     */
    public function setDeviceType($deviceType)
    {
        $this->container['deviceType'] = $deviceType;

        return $this;
    }

    /**
     * Gets entryId
     *
     * @return string|null
     */
    public function getEntryId()
    {
        return $this->container['entryId'];
    }

    /**
     * Sets entryId
     *
     * @param string|null $entryId 应用的入口ID（主要用于微应用）
     *
     * @return self
     */
    public function setEntryId($entryId)
    {
        $this->container['entryId'] = $entryId;

        return $this;
    }

    /**
     * Gets eventData
     *
     * @return string|null
     */
    public function getEventData()
    {
        return $this->container['eventData'];
    }

    /**
     * Sets eventData
     *
     * @param string|null $eventData 事件内容，系统预定义的事件-工作台角标参数参见下面数据类型与数据格式定义。对应用自定义事件，此内容由应用服务端与应用客户端沟通协商确定，蓝信开放平台不关心具体内容。
     *
     * @return self
     */
    public function setEventData($eventData)
    {
        $this->container['eventData'] = $eventData;

        return $this;
    }

    /**
     * Gets eventType
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['eventType'];
    }

    /**
     * Sets eventType
     *
     * @param string|null $eventType 事件类型，目前支持的系统预定义事件有工作台红点:app_changes。 对应用自定义事件数据类型拼接的建议规则 “应用type_场景type_场景Id(openid)” 应用自定义类型，应用内区分不同的事件类型，由应用自行决定具体值（接口透传该值）。
     *
     * @return self
     */
    public function setEventType($eventType)
    {
        $this->container['eventType'] = $eventType;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return int|null
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param int|null $expires 事件的过期时间，单位是秒。默认值为0是表示永不过期。如果设置指定过期时间（非0），则应用需要实现事件拉取的回调接口。
     *
     * @return self
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets pushData
     *
     * @return \LanXinPlusOpenAPI\Model\PushData|null
     */
    public function getPushData()
    {
        return $this->container['pushData'];
    }

    /**
     * Sets pushData
     *
     * @param \LanXinPlusOpenAPI\Model\PushData|null $pushData pushData
     *
     * @return self
     */
    public function setPushData($pushData)
    {
        $this->container['pushData'] = $pushData;

        return $this;
    }

    /**
     * Gets receiverIds
     *
     * @return string[]|null
     */
    public function getReceiverIds()
    {
        return $this->container['receiverIds'];
    }

    /**
     * Sets receiverIds
     *
     * @param string[]|null $receiverIds 接收者的open staffId列表
     *
     * @return self
     */
    public function setReceiverIds($receiverIds)
    {
        $this->container['receiverIds'] = $receiverIds;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version 可选字段，数据的版本号，要求是个时间戳，精确到微秒， 例如：1605693953610320
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


