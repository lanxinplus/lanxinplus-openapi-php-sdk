<?php
/**
 * RoleApi
 * PHP version 7.3
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */

/**
 * LanXin+ OpenAPI
 *
 * LanXin+ OpenAPI Platform
 *
 * Generated by: https://openapi.lanxin.cn
 */

/**
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */

namespace LanXinPlusOpenAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LanXinPlusOpenAPI\ApiException;
use LanXinPlusOpenAPI\Configuration;
use LanXinPlusOpenAPI\HeaderSelector;
use LanXinPlusOpenAPI\ObjectSerializer;

/**
 * RoleApi Class Doc Comment
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */
class RoleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1OrgRoleCreate
     *
     * 创建角色
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1OrgRoleCreateRequestBody $v1_org_role_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1OrgRoleCreateResponse
     */
    public function v1OrgRoleCreate($app_token, $orgid, $v1_org_role_create_request_body, $user_token = null)
    {
        list($response) = $this->v1OrgRoleCreateWithHttpInfo($app_token, $orgid, $v1_org_role_create_request_body, $user_token);
        return $response;
    }

    /**
     * Operation v1OrgRoleCreateWithHttpInfo
     *
     * 创建角色
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1OrgRoleCreateRequestBody $v1_org_role_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1OrgRoleCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OrgRoleCreateWithHttpInfo($app_token, $orgid, $v1_org_role_create_request_body, $user_token = null)
    {
        $request = $this->v1OrgRoleCreateRequest($app_token, $orgid, $v1_org_role_create_request_body, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1OrgRoleCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1OrgRoleCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1OrgRoleCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1OrgRoleCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OrgRoleCreateAsync
     *
     * 创建角色
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1OrgRoleCreateRequestBody $v1_org_role_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrgRoleCreateAsync($app_token, $orgid, $v1_org_role_create_request_body, $user_token = null)
    {
        return $this->v1OrgRoleCreateAsyncWithHttpInfo($app_token, $orgid, $v1_org_role_create_request_body, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OrgRoleCreateAsyncWithHttpInfo
     *
     * 创建角色
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1OrgRoleCreateRequestBody $v1_org_role_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrgRoleCreateAsyncWithHttpInfo($app_token, $orgid, $v1_org_role_create_request_body, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1OrgRoleCreateResponse';
        $request = $this->v1OrgRoleCreateRequest($app_token, $orgid, $v1_org_role_create_request_body, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OrgRoleCreate'
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1OrgRoleCreateRequestBody $v1_org_role_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OrgRoleCreateRequest($app_token, $orgid, $v1_org_role_create_request_body, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1OrgRoleCreate'
            );
        }
        // verify the required parameter 'orgid' is set
        if ($orgid === null || (is_array($orgid) && count($orgid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgid when calling v1OrgRoleCreate'
            );
        }
        // verify the required parameter 'v1_org_role_create_request_body' is set
        if ($v1_org_role_create_request_body === null || (is_array($v1_org_role_create_request_body) && count($v1_org_role_create_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1_org_role_create_request_body when calling v1OrgRoleCreate'
            );
        }

        $resourcePath = '/v1/org/{orgid}/role/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($orgid !== null) {
            $resourcePath = str_replace(
                '{' . 'orgid' . '}',
                ObjectSerializer::toPathValue($orgid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v1_org_role_create_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v1_org_role_create_request_body));
            } else {
                $httpBody = $v1_org_role_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OrgRoleMembersFetch
     *
     * 获取应用运营者列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $roleid roleid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1OrgRoleMembersFetchResponse
     */
    public function v1OrgRoleMembersFetch($app_token, $orgid, $roleid, $user_token = null)
    {
        list($response) = $this->v1OrgRoleMembersFetchWithHttpInfo($app_token, $orgid, $roleid, $user_token);
        return $response;
    }

    /**
     * Operation v1OrgRoleMembersFetchWithHttpInfo
     *
     * 获取应用运营者列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $roleid roleid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1OrgRoleMembersFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OrgRoleMembersFetchWithHttpInfo($app_token, $orgid, $roleid, $user_token = null)
    {
        $request = $this->v1OrgRoleMembersFetchRequest($app_token, $orgid, $roleid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1OrgRoleMembersFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1OrgRoleMembersFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1OrgRoleMembersFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1OrgRoleMembersFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OrgRoleMembersFetchAsync
     *
     * 获取应用运营者列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $roleid roleid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrgRoleMembersFetchAsync($app_token, $orgid, $roleid, $user_token = null)
    {
        return $this->v1OrgRoleMembersFetchAsyncWithHttpInfo($app_token, $orgid, $roleid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OrgRoleMembersFetchAsyncWithHttpInfo
     *
     * 获取应用运营者列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $roleid roleid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrgRoleMembersFetchAsyncWithHttpInfo($app_token, $orgid, $roleid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1OrgRoleMembersFetchResponse';
        $request = $this->v1OrgRoleMembersFetchRequest($app_token, $orgid, $roleid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OrgRoleMembersFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $roleid roleid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OrgRoleMembersFetchRequest($app_token, $orgid, $roleid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1OrgRoleMembersFetch'
            );
        }
        // verify the required parameter 'orgid' is set
        if ($orgid === null || (is_array($orgid) && count($orgid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgid when calling v1OrgRoleMembersFetch'
            );
        }
        // verify the required parameter 'roleid' is set
        if ($roleid === null || (is_array($roleid) && count($roleid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roleid when calling v1OrgRoleMembersFetch'
            );
        }

        $resourcePath = '/v1/org/{orgid}/role/{roleid}/members/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($orgid !== null) {
            $resourcePath = str_replace(
                '{' . 'orgid' . '}',
                ObjectSerializer::toPathValue($orgid),
                $resourcePath
            );
        }
        // path params
        if ($roleid !== null) {
            $resourcePath = str_replace(
                '{' . 'roleid' . '}',
                ObjectSerializer::toPathValue($roleid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1RoleMemberCreate
     *
     * 添加角色成员
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberCreateRequestBody $v1_role_member_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1RoleMemberCreateResponse
     */
    public function v1RoleMemberCreate($app_token, $v1_role_member_create_request_body, $user_token = null)
    {
        list($response) = $this->v1RoleMemberCreateWithHttpInfo($app_token, $v1_role_member_create_request_body, $user_token);
        return $response;
    }

    /**
     * Operation v1RoleMemberCreateWithHttpInfo
     *
     * 添加角色成员
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberCreateRequestBody $v1_role_member_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1RoleMemberCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1RoleMemberCreateWithHttpInfo($app_token, $v1_role_member_create_request_body, $user_token = null)
    {
        $request = $this->v1RoleMemberCreateRequest($app_token, $v1_role_member_create_request_body, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1RoleMemberCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1RoleMemberCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1RoleMemberCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1RoleMemberCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1RoleMemberCreateAsync
     *
     * 添加角色成员
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberCreateRequestBody $v1_role_member_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1RoleMemberCreateAsync($app_token, $v1_role_member_create_request_body, $user_token = null)
    {
        return $this->v1RoleMemberCreateAsyncWithHttpInfo($app_token, $v1_role_member_create_request_body, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1RoleMemberCreateAsyncWithHttpInfo
     *
     * 添加角色成员
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberCreateRequestBody $v1_role_member_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1RoleMemberCreateAsyncWithHttpInfo($app_token, $v1_role_member_create_request_body, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1RoleMemberCreateResponse';
        $request = $this->v1RoleMemberCreateRequest($app_token, $v1_role_member_create_request_body, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1RoleMemberCreate'
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberCreateRequestBody $v1_role_member_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1RoleMemberCreateRequest($app_token, $v1_role_member_create_request_body, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1RoleMemberCreate'
            );
        }
        // verify the required parameter 'v1_role_member_create_request_body' is set
        if ($v1_role_member_create_request_body === null || (is_array($v1_role_member_create_request_body) && count($v1_role_member_create_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1_role_member_create_request_body when calling v1RoleMemberCreate'
            );
        }

        $resourcePath = '/v1/rolemember/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v1_role_member_create_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v1_role_member_create_request_body));
            } else {
                $httpBody = $v1_role_member_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1RoleMemberDelete
     *
     * 删除角色成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $rolememberid rolememberid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberDeleteRequestBody $v1_role_member_delete_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1RoleMemberDeleteResponse
     */
    public function v1RoleMemberDelete($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token = null)
    {
        list($response) = $this->v1RoleMemberDeleteWithHttpInfo($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token);
        return $response;
    }

    /**
     * Operation v1RoleMemberDeleteWithHttpInfo
     *
     * 删除角色成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $rolememberid rolememberid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberDeleteRequestBody $v1_role_member_delete_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1RoleMemberDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1RoleMemberDeleteWithHttpInfo($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token = null)
    {
        $request = $this->v1RoleMemberDeleteRequest($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1RoleMemberDeleteResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1RoleMemberDeleteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1RoleMemberDeleteResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1RoleMemberDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1RoleMemberDeleteAsync
     *
     * 删除角色成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $rolememberid rolememberid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberDeleteRequestBody $v1_role_member_delete_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1RoleMemberDeleteAsync($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token = null)
    {
        return $this->v1RoleMemberDeleteAsyncWithHttpInfo($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1RoleMemberDeleteAsyncWithHttpInfo
     *
     * 删除角色成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $rolememberid rolememberid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberDeleteRequestBody $v1_role_member_delete_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1RoleMemberDeleteAsyncWithHttpInfo($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1RoleMemberDeleteResponse';
        $request = $this->v1RoleMemberDeleteRequest($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1RoleMemberDelete'
     *
     * @param  string $app_token app_token (required)
     * @param  string $rolememberid rolememberid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1RoleMemberDeleteRequestBody $v1_role_member_delete_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1RoleMemberDeleteRequest($app_token, $rolememberid, $v1_role_member_delete_request_body, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1RoleMemberDelete'
            );
        }
        // verify the required parameter 'rolememberid' is set
        if ($rolememberid === null || (is_array($rolememberid) && count($rolememberid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rolememberid when calling v1RoleMemberDelete'
            );
        }
        // verify the required parameter 'v1_role_member_delete_request_body' is set
        if ($v1_role_member_delete_request_body === null || (is_array($v1_role_member_delete_request_body) && count($v1_role_member_delete_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1_role_member_delete_request_body when calling v1RoleMemberDelete'
            );
        }

        $resourcePath = '/v1/rolemember/{rolememberid}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($rolememberid !== null) {
            $resourcePath = str_replace(
                '{' . 'rolememberid' . '}',
                ObjectSerializer::toPathValue($rolememberid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v1_role_member_delete_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v1_role_member_delete_request_body));
            } else {
                $httpBody = $v1_role_member_delete_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
