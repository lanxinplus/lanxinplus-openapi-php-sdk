<?php
/**
 * AddrbkStaffApi
 * PHP version 7.3
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */

/**
 * LanXin+ OpenAPI
 *
 * LanXin+ OpenAPI Platform
 *
 * Generated by: https://openapi.lanxin.cn
 */

/**
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */

namespace LanXinPlusOpenAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LanXinPlusOpenAPI\ApiException;
use LanXinPlusOpenAPI\Configuration;
use LanXinPlusOpenAPI\HeaderSelector;
use LanXinPlusOpenAPI\ObjectSerializer;

/**
 * AddrbkStaffApi Class Doc Comment
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */
class AddrbkStaffApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1OrgExtraFieldIdsFetch
     *
     * 获取人员信息扩展字段id列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始,默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1OrgExtraFieldIdsFetchResponse
     */
    public function v1OrgExtraFieldIdsFetch($app_token, $orgid, $user_token = null, $page = null, $page_size = null)
    {
        list($response) = $this->v1OrgExtraFieldIdsFetchWithHttpInfo($app_token, $orgid, $user_token, $page, $page_size);
        return $response;
    }

    /**
     * Operation v1OrgExtraFieldIdsFetchWithHttpInfo
     *
     * 获取人员信息扩展字段id列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始,默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1OrgExtraFieldIdsFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OrgExtraFieldIdsFetchWithHttpInfo($app_token, $orgid, $user_token = null, $page = null, $page_size = null)
    {
        $request = $this->v1OrgExtraFieldIdsFetchRequest($app_token, $orgid, $user_token, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1OrgExtraFieldIdsFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1OrgExtraFieldIdsFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1OrgExtraFieldIdsFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1OrgExtraFieldIdsFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1OrgExtraFieldIdsFetchAsync
     *
     * 获取人员信息扩展字段id列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始,默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrgExtraFieldIdsFetchAsync($app_token, $orgid, $user_token = null, $page = null, $page_size = null)
    {
        return $this->v1OrgExtraFieldIdsFetchAsyncWithHttpInfo($app_token, $orgid, $user_token, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OrgExtraFieldIdsFetchAsyncWithHttpInfo
     *
     * 获取人员信息扩展字段id列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始,默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrgExtraFieldIdsFetchAsyncWithHttpInfo($app_token, $orgid, $user_token = null, $page = null, $page_size = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1OrgExtraFieldIdsFetchResponse';
        $request = $this->v1OrgExtraFieldIdsFetchRequest($app_token, $orgid, $user_token, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OrgExtraFieldIdsFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $orgid orgid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始,默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OrgExtraFieldIdsFetchRequest($app_token, $orgid, $user_token = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1OrgExtraFieldIdsFetch'
            );
        }
        // verify the required parameter 'orgid' is set
        if ($orgid === null || (is_array($orgid) && count($orgid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orgid when calling v1OrgExtraFieldIdsFetch'
            );
        }

        $resourcePath = '/v1/org/{orgid}/extrafieldids/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_size'] = $page_size;
            }
        }


        // path params
        if ($orgid !== null) {
            $resourcePath = str_replace(
                '{' . 'orgid' . '}',
                ObjectSerializer::toPathValue($orgid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StaffsCreate
     *
     * 创建人员
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsCreateRequestBody $v1_staffs_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1StaffsCreateResponse
     */
    public function v1StaffsCreate($app_token, $v1_staffs_create_request_body, $user_token = null)
    {
        list($response) = $this->v1StaffsCreateWithHttpInfo($app_token, $v1_staffs_create_request_body, $user_token);
        return $response;
    }

    /**
     * Operation v1StaffsCreateWithHttpInfo
     *
     * 创建人员
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsCreateRequestBody $v1_staffs_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1StaffsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StaffsCreateWithHttpInfo($app_token, $v1_staffs_create_request_body, $user_token = null)
    {
        $request = $this->v1StaffsCreateRequest($app_token, $v1_staffs_create_request_body, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1StaffsCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1StaffsCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1StaffsCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StaffsCreateAsync
     *
     * 创建人员
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsCreateRequestBody $v1_staffs_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsCreateAsync($app_token, $v1_staffs_create_request_body, $user_token = null)
    {
        return $this->v1StaffsCreateAsyncWithHttpInfo($app_token, $v1_staffs_create_request_body, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StaffsCreateAsyncWithHttpInfo
     *
     * 创建人员
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsCreateRequestBody $v1_staffs_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsCreateAsyncWithHttpInfo($app_token, $v1_staffs_create_request_body, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsCreateResponse';
        $request = $this->v1StaffsCreateRequest($app_token, $v1_staffs_create_request_body, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StaffsCreate'
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsCreateRequestBody $v1_staffs_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1StaffsCreateRequest($app_token, $v1_staffs_create_request_body, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1StaffsCreate'
            );
        }
        // verify the required parameter 'v1_staffs_create_request_body' is set
        if ($v1_staffs_create_request_body === null || (is_array($v1_staffs_create_request_body) && count($v1_staffs_create_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1_staffs_create_request_body when calling v1StaffsCreate'
            );
        }

        $resourcePath = '/v1/staffs/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v1_staffs_create_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v1_staffs_create_request_body));
            } else {
                $httpBody = $v1_staffs_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StaffsDelete
     *
     * 人员删除接口
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1StaffsDeleteResponse
     */
    public function v1StaffsDelete($app_token, $staffid, $user_token = null)
    {
        list($response) = $this->v1StaffsDeleteWithHttpInfo($app_token, $staffid, $user_token);
        return $response;
    }

    /**
     * Operation v1StaffsDeleteWithHttpInfo
     *
     * 人员删除接口
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1StaffsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StaffsDeleteWithHttpInfo($app_token, $staffid, $user_token = null)
    {
        $request = $this->v1StaffsDeleteRequest($app_token, $staffid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1StaffsDeleteResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1StaffsDeleteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsDeleteResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1StaffsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StaffsDeleteAsync
     *
     * 人员删除接口
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsDeleteAsync($app_token, $staffid, $user_token = null)
    {
        return $this->v1StaffsDeleteAsyncWithHttpInfo($app_token, $staffid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StaffsDeleteAsyncWithHttpInfo
     *
     * 人员删除接口
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsDeleteAsyncWithHttpInfo($app_token, $staffid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsDeleteResponse';
        $request = $this->v1StaffsDeleteRequest($app_token, $staffid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StaffsDelete'
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1StaffsDeleteRequest($app_token, $staffid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1StaffsDelete'
            );
        }
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling v1StaffsDelete'
            );
        }

        $resourcePath = '/v1/staffs/{staffid}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($staffid !== null) {
            $resourcePath = str_replace(
                '{' . 'staffid' . '}',
                ObjectSerializer::toPathValue($staffid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StaffsDeptAncestorsFetch
     *
     * 获取人员分支祖先列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1StaffsDeptAncestorsFetchResponse
     */
    public function v1StaffsDeptAncestorsFetch($app_token, $staffid, $user_token = null)
    {
        list($response) = $this->v1StaffsDeptAncestorsFetchWithHttpInfo($app_token, $staffid, $user_token);
        return $response;
    }

    /**
     * Operation v1StaffsDeptAncestorsFetchWithHttpInfo
     *
     * 获取人员分支祖先列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1StaffsDeptAncestorsFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StaffsDeptAncestorsFetchWithHttpInfo($app_token, $staffid, $user_token = null)
    {
        $request = $this->v1StaffsDeptAncestorsFetchRequest($app_token, $staffid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1StaffsDeptAncestorsFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1StaffsDeptAncestorsFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsDeptAncestorsFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1StaffsDeptAncestorsFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StaffsDeptAncestorsFetchAsync
     *
     * 获取人员分支祖先列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsDeptAncestorsFetchAsync($app_token, $staffid, $user_token = null)
    {
        return $this->v1StaffsDeptAncestorsFetchAsyncWithHttpInfo($app_token, $staffid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StaffsDeptAncestorsFetchAsyncWithHttpInfo
     *
     * 获取人员分支祖先列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsDeptAncestorsFetchAsyncWithHttpInfo($app_token, $staffid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsDeptAncestorsFetchResponse';
        $request = $this->v1StaffsDeptAncestorsFetchRequest($app_token, $staffid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StaffsDeptAncestorsFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1StaffsDeptAncestorsFetchRequest($app_token, $staffid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1StaffsDeptAncestorsFetch'
            );
        }
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling v1StaffsDeptAncestorsFetch'
            );
        }

        $resourcePath = '/v1/staffs/{staffid}/departmentancestors/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($staffid !== null) {
            $resourcePath = str_replace(
                '{' . 'staffid' . '}',
                ObjectSerializer::toPathValue($staffid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StaffsFetch
     *
     * 获取人员基本信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1StaffsFetchResponse
     */
    public function v1StaffsFetch($app_token, $staffid, $user_token = null)
    {
        list($response) = $this->v1StaffsFetchWithHttpInfo($app_token, $staffid, $user_token);
        return $response;
    }

    /**
     * Operation v1StaffsFetchWithHttpInfo
     *
     * 获取人员基本信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1StaffsFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StaffsFetchWithHttpInfo($app_token, $staffid, $user_token = null)
    {
        $request = $this->v1StaffsFetchRequest($app_token, $staffid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1StaffsFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1StaffsFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1StaffsFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StaffsFetchAsync
     *
     * 获取人员基本信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsFetchAsync($app_token, $staffid, $user_token = null)
    {
        return $this->v1StaffsFetchAsyncWithHttpInfo($app_token, $staffid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StaffsFetchAsyncWithHttpInfo
     *
     * 获取人员基本信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsFetchAsyncWithHttpInfo($app_token, $staffid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsFetchResponse';
        $request = $this->v1StaffsFetchRequest($app_token, $staffid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StaffsFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1StaffsFetchRequest($app_token, $staffid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1StaffsFetch'
            );
        }
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling v1StaffsFetch'
            );
        }

        $resourcePath = '/v1/staffs/{staffid}/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($staffid !== null) {
            $resourcePath = str_replace(
                '{' . 'staffid' . '}',
                ObjectSerializer::toPathValue($staffid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StaffsInforFetch
     *
     * 获取人员详细信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1StaffsInforFetchResponse
     */
    public function v1StaffsInforFetch($app_token, $staffid, $user_token = null)
    {
        list($response) = $this->v1StaffsInforFetchWithHttpInfo($app_token, $staffid, $user_token);
        return $response;
    }

    /**
     * Operation v1StaffsInforFetchWithHttpInfo
     *
     * 获取人员详细信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1StaffsInforFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StaffsInforFetchWithHttpInfo($app_token, $staffid, $user_token = null)
    {
        $request = $this->v1StaffsInforFetchRequest($app_token, $staffid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1StaffsInforFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1StaffsInforFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsInforFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1StaffsInforFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StaffsInforFetchAsync
     *
     * 获取人员详细信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsInforFetchAsync($app_token, $staffid, $user_token = null)
    {
        return $this->v1StaffsInforFetchAsyncWithHttpInfo($app_token, $staffid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StaffsInforFetchAsyncWithHttpInfo
     *
     * 获取人员详细信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsInforFetchAsyncWithHttpInfo($app_token, $staffid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsInforFetchResponse';
        $request = $this->v1StaffsInforFetchRequest($app_token, $staffid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StaffsInforFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1StaffsInforFetchRequest($app_token, $staffid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1StaffsInforFetch'
            );
        }
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling v1StaffsInforFetch'
            );
        }

        $resourcePath = '/v1/staffs/{staffid}/infor/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($staffid !== null) {
            $resourcePath = str_replace(
                '{' . 'staffid' . '}',
                ObjectSerializer::toPathValue($staffid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1StaffsUpdate
     *
     * 更新人员
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsUpdateRequestBody $v1_staffs_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1StaffsUpdateResponse
     */
    public function v1StaffsUpdate($app_token, $staffid, $v1_staffs_update_request_body, $user_token = null)
    {
        list($response) = $this->v1StaffsUpdateWithHttpInfo($app_token, $staffid, $v1_staffs_update_request_body, $user_token);
        return $response;
    }

    /**
     * Operation v1StaffsUpdateWithHttpInfo
     *
     * 更新人员
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsUpdateRequestBody $v1_staffs_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1StaffsUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1StaffsUpdateWithHttpInfo($app_token, $staffid, $v1_staffs_update_request_body, $user_token = null)
    {
        $request = $this->v1StaffsUpdateRequest($app_token, $staffid, $v1_staffs_update_request_body, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1StaffsUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1StaffsUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1StaffsUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1StaffsUpdateAsync
     *
     * 更新人员
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsUpdateRequestBody $v1_staffs_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsUpdateAsync($app_token, $staffid, $v1_staffs_update_request_body, $user_token = null)
    {
        return $this->v1StaffsUpdateAsyncWithHttpInfo($app_token, $staffid, $v1_staffs_update_request_body, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1StaffsUpdateAsyncWithHttpInfo
     *
     * 更新人员
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsUpdateRequestBody $v1_staffs_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1StaffsUpdateAsyncWithHttpInfo($app_token, $staffid, $v1_staffs_update_request_body, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1StaffsUpdateResponse';
        $request = $this->v1StaffsUpdateRequest($app_token, $staffid, $v1_staffs_update_request_body, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1StaffsUpdate'
     *
     * @param  string $app_token app_token (required)
     * @param  string $staffid 人员 id (required)
     * @param  \LanXinPlusOpenAPI\Model\V1StaffsUpdateRequestBody $v1_staffs_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1StaffsUpdateRequest($app_token, $staffid, $v1_staffs_update_request_body, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1StaffsUpdate'
            );
        }
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling v1StaffsUpdate'
            );
        }
        // verify the required parameter 'v1_staffs_update_request_body' is set
        if ($v1_staffs_update_request_body === null || (is_array($v1_staffs_update_request_body) && count($v1_staffs_update_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1_staffs_update_request_body when calling v1StaffsUpdate'
            );
        }

        $resourcePath = '/v1/staffs/{staffid}/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($staffid !== null) {
            $resourcePath = str_replace(
                '{' . 'staffid' . '}',
                ObjectSerializer::toPathValue($staffid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v1_staffs_update_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v1_staffs_update_request_body));
            } else {
                $httpBody = $v1_staffs_update_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1TagsFetch
     *
     * 通过标签获取人员的id列表
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1TagsFetchRequestBody $v1_tags_fetch_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1TagsFetchResponse
     */
    public function v1TagsFetch($app_token, $v1_tags_fetch_request_body, $user_token = null, $page = null, $page_size = null)
    {
        list($response) = $this->v1TagsFetchWithHttpInfo($app_token, $v1_tags_fetch_request_body, $user_token, $page, $page_size);
        return $response;
    }

    /**
     * Operation v1TagsFetchWithHttpInfo
     *
     * 通过标签获取人员的id列表
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1TagsFetchRequestBody $v1_tags_fetch_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1TagsFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1TagsFetchWithHttpInfo($app_token, $v1_tags_fetch_request_body, $user_token = null, $page = null, $page_size = null)
    {
        $request = $this->v1TagsFetchRequest($app_token, $v1_tags_fetch_request_body, $user_token, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1TagsFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1TagsFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1TagsFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1TagsFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1TagsFetchAsync
     *
     * 通过标签获取人员的id列表
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1TagsFetchRequestBody $v1_tags_fetch_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TagsFetchAsync($app_token, $v1_tags_fetch_request_body, $user_token = null, $page = null, $page_size = null)
    {
        return $this->v1TagsFetchAsyncWithHttpInfo($app_token, $v1_tags_fetch_request_body, $user_token, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1TagsFetchAsyncWithHttpInfo
     *
     * 通过标签获取人员的id列表
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1TagsFetchRequestBody $v1_tags_fetch_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TagsFetchAsyncWithHttpInfo($app_token, $v1_tags_fetch_request_body, $user_token = null, $page = null, $page_size = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1TagsFetchResponse';
        $request = $this->v1TagsFetchRequest($app_token, $v1_tags_fetch_request_body, $user_token, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1TagsFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1TagsFetchRequestBody $v1_tags_fetch_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是1000，最大值是100000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1TagsFetchRequest($app_token, $v1_tags_fetch_request_body, $user_token = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1TagsFetch'
            );
        }
        // verify the required parameter 'v1_tags_fetch_request_body' is set
        if ($v1_tags_fetch_request_body === null || (is_array($v1_tags_fetch_request_body) && count($v1_tags_fetch_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1_tags_fetch_request_body when calling v1TagsFetch'
            );
        }

        $resourcePath = '/v1/tags/staffids/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_size'] = $page_size;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v1_tags_fetch_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v1_tags_fetch_request_body));
            } else {
                $httpBody = $v1_tags_fetch_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2StaffsIdMappingFetch
     *
     * 获取人员详细信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $org_id 查询人员所在的组织Id (required)
     * @param  string $id_type employ_id/mobile/mail/login/external_id (required)
     * @param  string $id_value id_type 对应的值：人员编号，手机号... (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V2StaffsIdMappingFetchResponse
     */
    public function v2StaffsIdMappingFetch($app_token, $org_id, $id_type, $id_value, $user_token = null)
    {
        list($response) = $this->v2StaffsIdMappingFetchWithHttpInfo($app_token, $org_id, $id_type, $id_value, $user_token);
        return $response;
    }

    /**
     * Operation v2StaffsIdMappingFetchWithHttpInfo
     *
     * 获取人员详细信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $org_id 查询人员所在的组织Id (required)
     * @param  string $id_type employ_id/mobile/mail/login/external_id (required)
     * @param  string $id_value id_type 对应的值：人员编号，手机号... (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V2StaffsIdMappingFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2StaffsIdMappingFetchWithHttpInfo($app_token, $org_id, $id_type, $id_value, $user_token = null)
    {
        $request = $this->v2StaffsIdMappingFetchRequest($app_token, $org_id, $id_type, $id_value, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V2StaffsIdMappingFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V2StaffsIdMappingFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V2StaffsIdMappingFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V2StaffsIdMappingFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2StaffsIdMappingFetchAsync
     *
     * 获取人员详细信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $org_id 查询人员所在的组织Id (required)
     * @param  string $id_type employ_id/mobile/mail/login/external_id (required)
     * @param  string $id_value id_type 对应的值：人员编号，手机号... (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2StaffsIdMappingFetchAsync($app_token, $org_id, $id_type, $id_value, $user_token = null)
    {
        return $this->v2StaffsIdMappingFetchAsyncWithHttpInfo($app_token, $org_id, $id_type, $id_value, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2StaffsIdMappingFetchAsyncWithHttpInfo
     *
     * 获取人员详细信息
     *
     * @param  string $app_token app_token (required)
     * @param  string $org_id 查询人员所在的组织Id (required)
     * @param  string $id_type employ_id/mobile/mail/login/external_id (required)
     * @param  string $id_value id_type 对应的值：人员编号，手机号... (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2StaffsIdMappingFetchAsyncWithHttpInfo($app_token, $org_id, $id_type, $id_value, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V2StaffsIdMappingFetchResponse';
        $request = $this->v2StaffsIdMappingFetchRequest($app_token, $org_id, $id_type, $id_value, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2StaffsIdMappingFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $org_id 查询人员所在的组织Id (required)
     * @param  string $id_type employ_id/mobile/mail/login/external_id (required)
     * @param  string $id_value id_type 对应的值：人员编号，手机号... (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2StaffsIdMappingFetchRequest($app_token, $org_id, $id_type, $id_value, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v2StaffsIdMappingFetch'
            );
        }
        // verify the required parameter 'org_id' is set
        if ($org_id === null || (is_array($org_id) && count($org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_id when calling v2StaffsIdMappingFetch'
            );
        }
        // verify the required parameter 'id_type' is set
        if ($id_type === null || (is_array($id_type) && count($id_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_type when calling v2StaffsIdMappingFetch'
            );
        }
        // verify the required parameter 'id_value' is set
        if ($id_value === null || (is_array($id_value) && count($id_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_value when calling v2StaffsIdMappingFetch'
            );
        }

        $resourcePath = '/v2/staffs/id_mapping/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($org_id !== null) {
            if('form' === 'form' && is_array($org_id)) {
                foreach($org_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['org_id'] = $org_id;
            }
        }
        // query params
        if ($id_type !== null) {
            if('form' === 'form' && is_array($id_type)) {
                foreach($id_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id_type'] = $id_type;
            }
        }
        // query params
        if ($id_value !== null) {
            if('form' === 'form' && is_array($id_value)) {
                foreach($id_value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id_value'] = $id_value;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2StaffsSearch
     *
     * 搜索人员
     *
     * @param  string $app_token app_token (required)
     * @param  string $user_id user_id (required)
     * @param  \LanXinPlusOpenAPI\Model\V2StaffsSearchRequestBody $v2_staffs_search_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V2StaffsSearchResponse
     */
    public function v2StaffsSearch($app_token, $user_id, $v2_staffs_search_request_body, $user_token = null)
    {
        list($response) = $this->v2StaffsSearchWithHttpInfo($app_token, $user_id, $v2_staffs_search_request_body, $user_token);
        return $response;
    }

    /**
     * Operation v2StaffsSearchWithHttpInfo
     *
     * 搜索人员
     *
     * @param  string $app_token app_token (required)
     * @param  string $user_id user_id (required)
     * @param  \LanXinPlusOpenAPI\Model\V2StaffsSearchRequestBody $v2_staffs_search_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V2StaffsSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2StaffsSearchWithHttpInfo($app_token, $user_id, $v2_staffs_search_request_body, $user_token = null)
    {
        $request = $this->v2StaffsSearchRequest($app_token, $user_id, $v2_staffs_search_request_body, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V2StaffsSearchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V2StaffsSearchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V2StaffsSearchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V2StaffsSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2StaffsSearchAsync
     *
     * 搜索人员
     *
     * @param  string $app_token app_token (required)
     * @param  string $user_id user_id (required)
     * @param  \LanXinPlusOpenAPI\Model\V2StaffsSearchRequestBody $v2_staffs_search_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2StaffsSearchAsync($app_token, $user_id, $v2_staffs_search_request_body, $user_token = null)
    {
        return $this->v2StaffsSearchAsyncWithHttpInfo($app_token, $user_id, $v2_staffs_search_request_body, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2StaffsSearchAsyncWithHttpInfo
     *
     * 搜索人员
     *
     * @param  string $app_token app_token (required)
     * @param  string $user_id user_id (required)
     * @param  \LanXinPlusOpenAPI\Model\V2StaffsSearchRequestBody $v2_staffs_search_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2StaffsSearchAsyncWithHttpInfo($app_token, $user_id, $v2_staffs_search_request_body, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V2StaffsSearchResponse';
        $request = $this->v2StaffsSearchRequest($app_token, $user_id, $v2_staffs_search_request_body, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2StaffsSearch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $user_id user_id (required)
     * @param  \LanXinPlusOpenAPI\Model\V2StaffsSearchRequestBody $v2_staffs_search_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v2StaffsSearchRequest($app_token, $user_id, $v2_staffs_search_request_body, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v2StaffsSearch'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v2StaffsSearch'
            );
        }
        // verify the required parameter 'v2_staffs_search_request_body' is set
        if ($v2_staffs_search_request_body === null || (is_array($v2_staffs_search_request_body) && count($v2_staffs_search_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v2_staffs_search_request_body when calling v2StaffsSearch'
            );
        }

        $resourcePath = '/v2/staffs/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_id'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v2_staffs_search_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v2_staffs_search_request_body));
            } else {
                $httpBody = $v2_staffs_search_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
