<?php
/**
 * AddrbkDepartmentApi
 * PHP version 7.3
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */

/**
 * LanXin+ OpenAPI
 *
 * LanXin+ OpenAPI Platform
 *
 * Generated by: https://openapi.lanxin.cn
 */

/**
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */

namespace LanXinPlusOpenAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LanXinPlusOpenAPI\ApiException;
use LanXinPlusOpenAPI\Configuration;
use LanXinPlusOpenAPI\HeaderSelector;
use LanXinPlusOpenAPI\ObjectSerializer;

/**
 * AddrbkDepartmentApi Class Doc Comment
 *
 * @category Class
 * @package  LanXinPlusOpenAPI
 * @author   LanXin OPEN
 * @link     https://openapi.lanxin.cn
 */
class AddrbkDepartmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1DeptsChildrenFetch
     *
     * 获取子分支列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1DeptsChildrenFetchResponse
     */
    public function v1DeptsChildrenFetch($app_token, $departmentid, $user_token = null)
    {
        list($response) = $this->v1DeptsChildrenFetchWithHttpInfo($app_token, $departmentid, $user_token);
        return $response;
    }

    /**
     * Operation v1DeptsChildrenFetchWithHttpInfo
     *
     * 获取子分支列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1DeptsChildrenFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DeptsChildrenFetchWithHttpInfo($app_token, $departmentid, $user_token = null)
    {
        $request = $this->v1DeptsChildrenFetchRequest($app_token, $departmentid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1DeptsChildrenFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1DeptsChildrenFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsChildrenFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1DeptsChildrenFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1DeptsChildrenFetchAsync
     *
     * 获取子分支列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsChildrenFetchAsync($app_token, $departmentid, $user_token = null)
    {
        return $this->v1DeptsChildrenFetchAsyncWithHttpInfo($app_token, $departmentid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DeptsChildrenFetchAsyncWithHttpInfo
     *
     * 获取子分支列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsChildrenFetchAsyncWithHttpInfo($app_token, $departmentid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsChildrenFetchResponse';
        $request = $this->v1DeptsChildrenFetchRequest($app_token, $departmentid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DeptsChildrenFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DeptsChildrenFetchRequest($app_token, $departmentid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1DeptsChildrenFetch'
            );
        }
        // verify the required parameter 'departmentid' is set
        if ($departmentid === null || (is_array($departmentid) && count($departmentid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departmentid when calling v1DeptsChildrenFetch'
            );
        }

        $resourcePath = '/v1/departments/{departmentid}/children/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($departmentid !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentid' . '}',
                ObjectSerializer::toPathValue($departmentid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DeptsCreate
     *
     * 创建分支
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsCreateRequestBody $v1_depts_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1DeptsCreateResponse
     */
    public function v1DeptsCreate($app_token, $v1_depts_create_request_body, $user_token = null)
    {
        list($response) = $this->v1DeptsCreateWithHttpInfo($app_token, $v1_depts_create_request_body, $user_token);
        return $response;
    }

    /**
     * Operation v1DeptsCreateWithHttpInfo
     *
     * 创建分支
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsCreateRequestBody $v1_depts_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1DeptsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DeptsCreateWithHttpInfo($app_token, $v1_depts_create_request_body, $user_token = null)
    {
        $request = $this->v1DeptsCreateRequest($app_token, $v1_depts_create_request_body, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1DeptsCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1DeptsCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1DeptsCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1DeptsCreateAsync
     *
     * 创建分支
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsCreateRequestBody $v1_depts_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsCreateAsync($app_token, $v1_depts_create_request_body, $user_token = null)
    {
        return $this->v1DeptsCreateAsyncWithHttpInfo($app_token, $v1_depts_create_request_body, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DeptsCreateAsyncWithHttpInfo
     *
     * 创建分支
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsCreateRequestBody $v1_depts_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsCreateAsyncWithHttpInfo($app_token, $v1_depts_create_request_body, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsCreateResponse';
        $request = $this->v1DeptsCreateRequest($app_token, $v1_depts_create_request_body, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DeptsCreate'
     *
     * @param  string $app_token app_token (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsCreateRequestBody $v1_depts_create_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DeptsCreateRequest($app_token, $v1_depts_create_request_body, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1DeptsCreate'
            );
        }
        // verify the required parameter 'v1_depts_create_request_body' is set
        if ($v1_depts_create_request_body === null || (is_array($v1_depts_create_request_body) && count($v1_depts_create_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1_depts_create_request_body when calling v1DeptsCreate'
            );
        }

        $resourcePath = '/v1/departments/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v1_depts_create_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v1_depts_create_request_body));
            } else {
                $httpBody = $v1_depts_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DeptsDelete
     *
     * 删除分支
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1DeptsDeleteResponse
     */
    public function v1DeptsDelete($app_token, $departmentid, $user_token = null)
    {
        list($response) = $this->v1DeptsDeleteWithHttpInfo($app_token, $departmentid, $user_token);
        return $response;
    }

    /**
     * Operation v1DeptsDeleteWithHttpInfo
     *
     * 删除分支
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1DeptsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DeptsDeleteWithHttpInfo($app_token, $departmentid, $user_token = null)
    {
        $request = $this->v1DeptsDeleteRequest($app_token, $departmentid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1DeptsDeleteResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1DeptsDeleteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsDeleteResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1DeptsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1DeptsDeleteAsync
     *
     * 删除分支
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsDeleteAsync($app_token, $departmentid, $user_token = null)
    {
        return $this->v1DeptsDeleteAsyncWithHttpInfo($app_token, $departmentid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DeptsDeleteAsyncWithHttpInfo
     *
     * 删除分支
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsDeleteAsyncWithHttpInfo($app_token, $departmentid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsDeleteResponse';
        $request = $this->v1DeptsDeleteRequest($app_token, $departmentid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DeptsDelete'
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DeptsDeleteRequest($app_token, $departmentid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1DeptsDelete'
            );
        }
        // verify the required parameter 'departmentid' is set
        if ($departmentid === null || (is_array($departmentid) && count($departmentid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departmentid when calling v1DeptsDelete'
            );
        }

        $resourcePath = '/v1/departments/{departmentid}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($departmentid !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentid' . '}',
                ObjectSerializer::toPathValue($departmentid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DeptsFetch
     *
     * 获取分支详情
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1DeptsFetchResponse
     */
    public function v1DeptsFetch($app_token, $departmentid, $user_token = null)
    {
        list($response) = $this->v1DeptsFetchWithHttpInfo($app_token, $departmentid, $user_token);
        return $response;
    }

    /**
     * Operation v1DeptsFetchWithHttpInfo
     *
     * 获取分支详情
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1DeptsFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DeptsFetchWithHttpInfo($app_token, $departmentid, $user_token = null)
    {
        $request = $this->v1DeptsFetchRequest($app_token, $departmentid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1DeptsFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1DeptsFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1DeptsFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1DeptsFetchAsync
     *
     * 获取分支详情
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsFetchAsync($app_token, $departmentid, $user_token = null)
    {
        return $this->v1DeptsFetchAsyncWithHttpInfo($app_token, $departmentid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DeptsFetchAsyncWithHttpInfo
     *
     * 获取分支详情
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsFetchAsyncWithHttpInfo($app_token, $departmentid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsFetchResponse';
        $request = $this->v1DeptsFetchRequest($app_token, $departmentid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DeptsFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DeptsFetchRequest($app_token, $departmentid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1DeptsFetch'
            );
        }
        // verify the required parameter 'departmentid' is set
        if ($departmentid === null || (is_array($departmentid) && count($departmentid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departmentid when calling v1DeptsFetch'
            );
        }

        $resourcePath = '/v1/departments/{departmentid}/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($departmentid !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentid' . '}',
                ObjectSerializer::toPathValue($departmentid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DeptsStaffsCreate
     *
     * 添加分支成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1DeptsStaffsCreateResponse
     */
    public function v1DeptsStaffsCreate($app_token, $departmentid, $staffid, $user_token = null)
    {
        list($response) = $this->v1DeptsStaffsCreateWithHttpInfo($app_token, $departmentid, $staffid, $user_token);
        return $response;
    }

    /**
     * Operation v1DeptsStaffsCreateWithHttpInfo
     *
     * 添加分支成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1DeptsStaffsCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DeptsStaffsCreateWithHttpInfo($app_token, $departmentid, $staffid, $user_token = null)
    {
        $request = $this->v1DeptsStaffsCreateRequest($app_token, $departmentid, $staffid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1DeptsStaffsCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1DeptsStaffsCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsStaffsCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1DeptsStaffsCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1DeptsStaffsCreateAsync
     *
     * 添加分支成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsStaffsCreateAsync($app_token, $departmentid, $staffid, $user_token = null)
    {
        return $this->v1DeptsStaffsCreateAsyncWithHttpInfo($app_token, $departmentid, $staffid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DeptsStaffsCreateAsyncWithHttpInfo
     *
     * 添加分支成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsStaffsCreateAsyncWithHttpInfo($app_token, $departmentid, $staffid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsStaffsCreateResponse';
        $request = $this->v1DeptsStaffsCreateRequest($app_token, $departmentid, $staffid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DeptsStaffsCreate'
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DeptsStaffsCreateRequest($app_token, $departmentid, $staffid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1DeptsStaffsCreate'
            );
        }
        // verify the required parameter 'departmentid' is set
        if ($departmentid === null || (is_array($departmentid) && count($departmentid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departmentid when calling v1DeptsStaffsCreate'
            );
        }
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling v1DeptsStaffsCreate'
            );
        }

        $resourcePath = '/v1/departments/{departmentid}/staffs/{staffid}/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($departmentid !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentid' . '}',
                ObjectSerializer::toPathValue($departmentid),
                $resourcePath
            );
        }
        // path params
        if ($staffid !== null) {
            $resourcePath = str_replace(
                '{' . 'staffid' . '}',
                ObjectSerializer::toPathValue($staffid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DeptsStaffsDelete
     *
     * 删除分支成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1DeptsStaffsDeleteResponse
     */
    public function v1DeptsStaffsDelete($app_token, $departmentid, $staffid, $user_token = null)
    {
        list($response) = $this->v1DeptsStaffsDeleteWithHttpInfo($app_token, $departmentid, $staffid, $user_token);
        return $response;
    }

    /**
     * Operation v1DeptsStaffsDeleteWithHttpInfo
     *
     * 删除分支成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1DeptsStaffsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DeptsStaffsDeleteWithHttpInfo($app_token, $departmentid, $staffid, $user_token = null)
    {
        $request = $this->v1DeptsStaffsDeleteRequest($app_token, $departmentid, $staffid, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1DeptsStaffsDeleteResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1DeptsStaffsDeleteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsStaffsDeleteResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1DeptsStaffsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1DeptsStaffsDeleteAsync
     *
     * 删除分支成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsStaffsDeleteAsync($app_token, $departmentid, $staffid, $user_token = null)
    {
        return $this->v1DeptsStaffsDeleteAsyncWithHttpInfo($app_token, $departmentid, $staffid, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DeptsStaffsDeleteAsyncWithHttpInfo
     *
     * 删除分支成员
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsStaffsDeleteAsyncWithHttpInfo($app_token, $departmentid, $staffid, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsStaffsDeleteResponse';
        $request = $this->v1DeptsStaffsDeleteRequest($app_token, $departmentid, $staffid, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DeptsStaffsDelete'
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $staffid staffid (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DeptsStaffsDeleteRequest($app_token, $departmentid, $staffid, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1DeptsStaffsDelete'
            );
        }
        // verify the required parameter 'departmentid' is set
        if ($departmentid === null || (is_array($departmentid) && count($departmentid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departmentid when calling v1DeptsStaffsDelete'
            );
        }
        // verify the required parameter 'staffid' is set
        if ($staffid === null || (is_array($staffid) && count($staffid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staffid when calling v1DeptsStaffsDelete'
            );
        }

        $resourcePath = '/v1/departments/{departmentid}/staffs/{staffid}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($departmentid !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentid' . '}',
                ObjectSerializer::toPathValue($departmentid),
                $resourcePath
            );
        }
        // path params
        if ($staffid !== null) {
            $resourcePath = str_replace(
                '{' . 'staffid' . '}',
                ObjectSerializer::toPathValue($staffid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DeptsStaffsFetch
     *
     * 获取分支成员列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是100，最大值是100 (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1DeptsStaffsFetchResponse
     */
    public function v1DeptsStaffsFetch($app_token, $departmentid, $user_token = null, $page = null, $page_size = null)
    {
        list($response) = $this->v1DeptsStaffsFetchWithHttpInfo($app_token, $departmentid, $user_token, $page, $page_size);
        return $response;
    }

    /**
     * Operation v1DeptsStaffsFetchWithHttpInfo
     *
     * 获取分支成员列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是100，最大值是100 (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1DeptsStaffsFetchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DeptsStaffsFetchWithHttpInfo($app_token, $departmentid, $user_token = null, $page = null, $page_size = null)
    {
        $request = $this->v1DeptsStaffsFetchRequest($app_token, $departmentid, $user_token, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1DeptsStaffsFetchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1DeptsStaffsFetchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsStaffsFetchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1DeptsStaffsFetchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1DeptsStaffsFetchAsync
     *
     * 获取分支成员列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是100，最大值是100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsStaffsFetchAsync($app_token, $departmentid, $user_token = null, $page = null, $page_size = null)
    {
        return $this->v1DeptsStaffsFetchAsyncWithHttpInfo($app_token, $departmentid, $user_token, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DeptsStaffsFetchAsyncWithHttpInfo
     *
     * 获取分支成员列表
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是100，最大值是100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsStaffsFetchAsyncWithHttpInfo($app_token, $departmentid, $user_token = null, $page = null, $page_size = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsStaffsFetchResponse';
        $request = $this->v1DeptsStaffsFetchRequest($app_token, $departmentid, $user_token, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DeptsStaffsFetch'
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  string $user_token user_token (optional)
     * @param  int $page 起始页码从1开始，默认值为1 (optional)
     * @param  int $page_size 每页显示个数，默认值是100，最大值是100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DeptsStaffsFetchRequest($app_token, $departmentid, $user_token = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1DeptsStaffsFetch'
            );
        }
        // verify the required parameter 'departmentid' is set
        if ($departmentid === null || (is_array($departmentid) && count($departmentid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departmentid when calling v1DeptsStaffsFetch'
            );
        }

        $resourcePath = '/v1/departments/{departmentid}/staffs/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_size'] = $page_size;
            }
        }


        // path params
        if ($departmentid !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentid' . '}',
                ObjectSerializer::toPathValue($departmentid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DeptsUpdate
     *
     * 更新分支
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsUpdateRequestBody $v1_depts_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LanXinPlusOpenAPI\Model\V1DeptsUpdateResponse
     */
    public function v1DeptsUpdate($app_token, $departmentid, $v1_depts_update_request_body, $user_token = null)
    {
        list($response) = $this->v1DeptsUpdateWithHttpInfo($app_token, $departmentid, $v1_depts_update_request_body, $user_token);
        return $response;
    }

    /**
     * Operation v1DeptsUpdateWithHttpInfo
     *
     * 更新分支
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsUpdateRequestBody $v1_depts_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \LanXinPlusOpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LanXinPlusOpenAPI\Model\V1DeptsUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DeptsUpdateWithHttpInfo($app_token, $departmentid, $v1_depts_update_request_body, $user_token = null)
    {
        $request = $this->v1DeptsUpdateRequest($app_token, $departmentid, $v1_depts_update_request_body, $user_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LanXinPlusOpenAPI\Model\V1DeptsUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LanXinPlusOpenAPI\Model\V1DeptsUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LanXinPlusOpenAPI\Model\V1DeptsUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1DeptsUpdateAsync
     *
     * 更新分支
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsUpdateRequestBody $v1_depts_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsUpdateAsync($app_token, $departmentid, $v1_depts_update_request_body, $user_token = null)
    {
        return $this->v1DeptsUpdateAsyncWithHttpInfo($app_token, $departmentid, $v1_depts_update_request_body, $user_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DeptsUpdateAsyncWithHttpInfo
     *
     * 更新分支
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsUpdateRequestBody $v1_depts_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DeptsUpdateAsyncWithHttpInfo($app_token, $departmentid, $v1_depts_update_request_body, $user_token = null)
    {
        $returnType = '\LanXinPlusOpenAPI\Model\V1DeptsUpdateResponse';
        $request = $this->v1DeptsUpdateRequest($app_token, $departmentid, $v1_depts_update_request_body, $user_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DeptsUpdate'
     *
     * @param  string $app_token app_token (required)
     * @param  string $departmentid departmentid (required)
     * @param  \LanXinPlusOpenAPI\Model\V1DeptsUpdateRequestBody $v1_depts_update_request_body Request Body (required)
     * @param  string $user_token user_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DeptsUpdateRequest($app_token, $departmentid, $v1_depts_update_request_body, $user_token = null)
    {
        // verify the required parameter 'app_token' is set
        if ($app_token === null || (is_array($app_token) && count($app_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_token when calling v1DeptsUpdate'
            );
        }
        // verify the required parameter 'departmentid' is set
        if ($departmentid === null || (is_array($departmentid) && count($departmentid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departmentid when calling v1DeptsUpdate'
            );
        }
        // verify the required parameter 'v1_depts_update_request_body' is set
        if ($v1_depts_update_request_body === null || (is_array($v1_depts_update_request_body) && count($v1_depts_update_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1_depts_update_request_body when calling v1DeptsUpdate'
            );
        }

        $resourcePath = '/v1/departments/{departmentid}/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_token !== null) {
            if('form' === 'form' && is_array($app_token)) {
                foreach($app_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app_token'] = $app_token;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }


        // path params
        if ($departmentid !== null) {
            $resourcePath = str_replace(
                '{' . 'departmentid' . '}',
                ObjectSerializer::toPathValue($departmentid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($v1_depts_update_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($v1_depts_update_request_body));
            } else {
                $httpBody = $v1_depts_update_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
